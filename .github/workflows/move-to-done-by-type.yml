name: Move closed issues to the right "Pronto" column

on:
  issues:
    types: [closed]   # roda só quando uma issue (inclui EPIC, que é issue) é fechada

env:
  ORG: "Compila-logo-existe"     # org ou usuário dono do Project v2
  PROJECT_NUMBER: "7"            # número do Project v2 (não é o ID)
  # mapeie label -> opção do campo Status (exatamente como aparece no Project)
  MAP_JSON: >
    {
      "tipo:interface": "Pronto - Interface",
      "tipo:integracao": "Pronto - Integração",
      "tipo:unidade": "Pronto - Unidade",
      "default": "Pronto"
    }
  ADD_IF_MISSING: "false"        # "true" para adicionar a issue ao Project se ela não estiver nele

jobs:
  move:
    if: github.event.issue.state == 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      # para Projects v2 via GraphQL, o GITHUB_TOKEN precisa ter acesso ao Project (mesma org)
    steps:
      - name: Route closed item by label to Status
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const number = context.payload.issue.number;

            // 1) Escolhe o Status alvo pelo label
            const labels = (context.payload.issue.labels || []).map(l => typeof l === 'string' ? l : l.name);
            const MAP = JSON.parse(process.env.MAP_JSON);
            const targetStatus =
              labels.find(l => MAP[l]) ? MAP[labels.find(l => MAP[l])] :
              (MAP.default || "Pronto");

            core.info(`Labels: ${labels.join(', ') || '(nenhuma)'} → Status alvo: ${targetStatus}`);

            // 2) Descobre Project, campo Status e opções (GraphQL)
            const ORG = process.env.ORG;
            const PROJECT_NUMBER = parseInt(process.env.PROJECT_NUMBER, 10);

            const projectQuery = `
              query($org:String!, $number:Int!) {
                organization(login: $org) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }`;

            const proj = await github.graphql(projectQuery, { org: ORG, number: PROJECT_NUMBER });
            const project = proj.organization?.projectV2;
            if (!project) {
              core.setFailed(`Project v2 ${ORG}#${PROJECT_NUMBER} não encontrado`);
              return;
            }
            const statusField = project.fields.nodes.find(f => f?.name === "Status");
            if (!statusField) {
              core.setFailed(`Campo "Status" não encontrado no Project v2`);
              return;
            }
            const option = statusField.options.find(o => o.name === targetStatus);
            if (!option) {
              core.setFailed(`Opção "${targetStatus}" não encontrada no campo Status`);
              return;
            }

            // 3) Descobre o item da issue dentro do Project (ou adiciona se permitido)
            const issueQuery = `
              query($owner:String!, $repo:String!, $num:Int!) {
                repository(owner:$owner, name:$repo) {
                  issue(number:$num) {
                    id
                    projectItems(first: 50) {
                      nodes { id project { ... on ProjectV2 { id number title } } }
                    }
                  }
                }
              }`;
            const issueRes = await github.graphql(issueQuery, { owner, repo, num: number });
            const issueId = issueRes.repository.issue.id;
            let item = issueRes.repository.issue.projectItems.nodes.find(n => n.project?.id === project.id);

            if (!item) {
              if (process.env.ADD_IF_MISSING === "true") {
                const addMutation = `
                  mutation($projectId:ID!, $contentId:ID!) {
                    addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                      item { id }
                    }
                  }`;
                const added = await github.graphql(addMutation, { projectId: project.id, contentId: issueId });
                item = added.addProjectV2ItemById.item;
                core.info(`Issue #${number} adicionada ao Project "${project.title}".`);
              } else {
                core.info(`Issue #${number} não está no Project; nada a fazer.`);
                return;
              }
            }

            // 4) Atualiza o Status
            const updateMutation = `
              mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!) {
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                  value:{ singleSelectOptionId:$optionId }
                }) { clientMutationId }
              }`;
            await github.graphql(updateMutation, {
              projectId: project.id,
              itemId: item.id,
              fieldId: statusField.id,
              optionId: option.id
            });
            core.info(`Status de #${number} → "${targetStatus}" (Project "${project.title}") atualizado com sucesso.`);
